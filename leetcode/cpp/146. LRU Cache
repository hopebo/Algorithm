class LRUCache {
private:
	int used;
	int total;
	list<int> active;
	map<int, pair<int, list<int>::iterator> > cache;
public:
	LRUCache(int capacity) {
		used = 0;
		total = capacity;
	}

	int get(int key) {
		if (cache.count(key))
		{
			active.erase(cache[key].second);
			cache[key].second = active.insert(active.end(),key);
			return cache[key].first;
		}
		else
			return -1;
	}

	void put(int key, int value) {
		if (cache.count(key))
		{
			active.erase(cache[key].second);
		}
		else
		{
			if (used < total)
			{
				used++;
			}
			else
			{
				cache.erase(active.front());
				active.pop_front();
			}
		}
		cache[key] = pair<int, list<int>::iterator>(value, active.insert(active.end(), key));
		return;
	}
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
