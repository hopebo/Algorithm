class Solution {
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        vector<pair<int, int>> points;
        points.push_back(pair<int, int>(p1[0], p1[1]));
        points.push_back(pair<int, int>(p2[0], p2[1]));
        points.push_back(pair<int, int>(p3[0], p3[1]));
        points.push_back(pair<int, int>(p4[0], p4[1]));
        sort(points.begin(), points.end());
        int len1 = calDist(points[0], points[1]), len2 = calDist(points[0], points[2]);
        int len3 = calDist(points[3], points[1]), len4 = calDist(points[3], points[2]);
        return len1 == len2 && len3 == len4 && len2 == len3 && len1 != 0 && (points[1].first - points[0].first) * (points[2].first - points[0].first) + (points[1].second - points[0].second) * (points[2].second - points[0].second) == 0;
    }
    int calDist(pair<int, int> A, pair<int, int> B) {
        int x = A.first - B.first, y = A.second - B.second;
        return x*x + y*y;
    }
};
