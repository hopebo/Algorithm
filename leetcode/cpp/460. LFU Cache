class LFUCache {
private:
    map<int, pair<int, int>> cache;
    map<int, list<int>> freq;
    map<int, list<int>::iterator> iter;
    int volume;
    int minfreq;
public:
    LFUCache(int capacity) {
        volume = capacity;
        minfreq = 0;
    }
    
    int get(int key) {
        if (!cache.count(key))
            return -1;
        int counts = cache[key].second++;
        freq[counts].erase(iter[key]);
        if (freq[counts].empty())
        {
            if (minfreq == counts)
                minfreq = counts+1;
            freq.erase(counts);
        }
        iter[key] = freq[counts+1].insert(freq[counts+1].end(), key);
        return cache[key].first;
    }
    
    void put(int key, int value) {
        if (volume == 0)
            return;
        if (cache.count(key))
        {
            int counts = cache[key].second++;
            freq[counts].erase(iter[key]);
            if (freq[counts].empty())
            {
                if (minfreq == counts)
                    minfreq = counts+1;
                freq.erase(counts);
            }
            iter[key] = freq[counts+1].insert(freq[counts+1].end(), key);
            cache[key].first = value;
            return;
        }
        if (cache.size() == volume)
        {
            int del = *freq[minfreq].begin();
            freq[minfreq].erase(freq[minfreq].begin());
            if (freq[minfreq].empty())
                freq.erase(minfreq);
            cache.erase(del);
            iter.erase(del);
        }
        cache[key] = pair<int, int>(value, 1);
        minfreq = 1;
        iter[key] = freq[1].insert(freq[1].end(), key);
        return;
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
