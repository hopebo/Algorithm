class Solution {
public:
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        return shop(price, special, needs, 0);
    }
    int shop(vector<int>& price, vector<vector<int>>& special, vector<int>& needs, int begin) {
        int res = INT_MAX;
        for (int i = begin; i < special.size(); i++)
        {
            if (judge(special[i], needs))
            {
                change(special[i], needs, -1);
                res = min(res, special[i].back() + shop(price, special, needs, i));
                change(special[i], needs, 1);
            }
        }
        int cost = 0;
        for (int i = 0; i < needs.size(); i++)
            cost += price[i] * needs[i];
        res = min(res, cost);
        return res;
    }
    bool judge(vector<int>& offer, vector<int>& needs) {
        for (int i = 0; i < needs.size(); i++)
            if (offer[i] > needs[i])
                return false;
        return true;
    }
    void change(vector<int>& offer, vector<int>& needs, int sign) {
        for (int i = 0; i < needs.size(); i++)
            needs[i] += sign * offer[i];
        return;
    }
};
