title：
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

my solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (head == NULL || k == 1)//头指针为空或者k=1的时候不需要进行反转，属于特殊情况
            return head;
        vector <ListNode*> p(k);
        p[0] = head;
        int i;
        for(i = 0;p[i]->next != NULL && i < k-1;i++)//由于指针是单向的，所以需要反转指向的话，需要存储每个结点的位置
        {
            p[i+1] = p[i]->next;
        }
        if (i < k-1)
            return head;
        else
        {
            head->next = reverseKGroup(p[k-1]->next,k);//递归进行反转，头指针指向k个结点之后的序列反转结果
            for (i = k-1 ; i > 0 ; i--)
            {
                p[i]->next = p[i-1];
            }
            return p[k-1];
            
        }
    }
};
