class Solution {
public:
    int divide(int dividend, int divisor) {
        if (divisor == 0 || (dividend == INT_MIN && divisor == -1))
			return INT_MAX;
		int quotient = 0;
		if (dividend == INT_MIN && divisor != INT_MIN)//刚开始以为不能使用long int变量，所以直接将INT_MIN取绝对值会导致int类型溢出
    {
			dividend = -(abs(dividend) - abs(divisor));
			quotient = 1;
		}
		else if (dividend != INT_MIN && divisor == INT_MIN)
			return 0;
		else if (dividend == INT_MIN && divisor == INT_MIN)
			return 1;		
		bool sign = ((dividend < 0) && (divisor < 0)) || (!(dividend < 0) && !(divisor < 0));
		dividend = abs(dividend);
		divisor = abs(divisor);
		while (1)
		{
            int part = 1;
            if(dividend < divisor)
                break;
            long temp = divisor;
            while (dividend >= temp + temp)//如果temp为int类型，该步判断可能会出现溢出，所以只能用long类型
            {
                temp = temp << 1;
                part = part << 1;
            }
            quotient += part;
            dividend -= temp;
		}
		if (!sign)
		    quotient = -quotient;
		return quotient;
    }
};
