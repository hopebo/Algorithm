/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> ans;
        if(intervals.empty())
        {
            ans.push_back(newInterval);
            return ans;
        }
        int i = 0, over_start, over_end;
        while(i < intervals.size() && newInterval.start > intervals[i].end)
        {
            ans.push_back(intervals[i]);
            i++;
        }
        if (i < intervals.size())
            newInterval.start = min(newInterval.start,intervals[i].start);
        while(i < intervals.size() && newInterval.end >= intervals[i].start)
            i++;
        if (i > 0)
            newInterval.end = max(newInterval.end,intervals[i-1].end);
        ans.push_back(newInterval);
        for (;i < intervals.size();i++)
            ans.push_back(intervals[i]);
        return ans;
    }
};
