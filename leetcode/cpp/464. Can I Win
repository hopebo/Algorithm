class Solution {
public:
    map<int, bool> ifwin;
    bool canIWin(int maxChoosableInteger, int desiredTotal) {
        if (desiredTotal <= 0)
            return true;
        if (((1+maxChoosableInteger)*maxChoosableInteger)/2 < desiredTotal)
            return false;
        vector<bool> choose(maxChoosableInteger+1, true);
        return solve(choose, 0, desiredTotal);
    }
    bool solve(vector<bool>& choose, int curSum, int target) {
        if (curSum >= target)
            return false;
        int state = changeToInt(choose);
        if (ifwin.count(state))
            return ifwin[state];
        for (int i = choose.size()-1; i > 0; i--)
        {
            if (choose[i])
            {
                choose[i] = false;
                if (!solve(choose, curSum+i, target))
                {
                    ifwin[state] = true;
                    choose[i] = true;
                    return true;
                }
                choose[i] = true;
            }
        }
        ifwin[state] = false;
        return false;
    }
    int changeToInt(vector<bool>& choose) {
        int res = 0;
        for (int i = 0; i < choose.size(); i++)
        {
            res <<= 1;
            if (choose[i])
                res |= 1;
        }
        return res;
    }
};
