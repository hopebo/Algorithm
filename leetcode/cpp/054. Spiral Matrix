class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        if (matrix.empty() || matrix[0].empty())
            return ans;
        int ifodd, looprange, m = matrix.size(), n = matrix[0].size();
        if (m < n)
        {
            looprange = ceil(m/2.0) - 1;
            ifodd = m%2;
        }
        else
        {
            looprange = ceil(n/2.0) - 1;
            ifodd = n%2;
        }
        for (int loop = 0;loop < looprange;loop++)
            spiral(ans, matrix, loop, m, n, 0);
        spiral(ans, matrix, looprange, m, n, ifodd);
        return ans;
    }
    void spiral(vector<int>& ans, vector<vector<int>>& matrix, int loop, int m, int n, int ifodd)
    {
        for(int j = loop; j < n-loop-1;j++)
            ans.push_back(matrix[loop][j]);
        for(int i = loop; i < m-loop-1;i++)
            ans.push_back(matrix[i][n-1-loop]);
        if (ifodd)
        {
            ans.push_back(matrix[m-1-loop][n-1-loop]);
            return;
        }
        for(int j = n-1-loop; j > loop;j--)
            ans.push_back(matrix[m-1-loop][j]);
        for(int i = m-1-loop; i > loop;i--)
            ans.push_back(matrix[i][loop]);
        return;
    }
};
