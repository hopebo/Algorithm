/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (head == NULL || head->next == NULL)
			return true;
		ListNode *slow = head, *fast = head, *prev = NULL;
		while (fast->next != NULL && fast->next->next != NULL)
		{
			fast = fast->next->next;
			ListNode *temp = slow->next;
			slow->next = prev;
			prev = slow;
			slow = temp;
		}
		bool flag = true;
		if (fast->next == NULL)
			fast = slow->next;
		else
		{
			if (slow->val != slow->next->val)
				flag = false;
			fast = slow->next->next;
		}
		swap(slow, prev);
		while (flag && fast != NULL)
		{
			if (fast->val != slow->val)
				flag = false;
			ListNode *temp = slow->next;
			slow->next = prev;
			prev = slow;
			slow = temp;
			fast = fast->next;
		}
		if (!flag)
		{
			while (slow != NULL)
			{
				ListNode *temp = slow->next;
				slow->next = prev;
				prev = slow;
				slow = temp;
			}
		}
		return flag;
    }
};
