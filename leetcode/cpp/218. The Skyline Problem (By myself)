class Solution {
public:
	struct cmp {
		bool operator()(vector<int> x, vector<int> y)
		{
			return x[0] > y[0];   //从小到大排序。即x小的优先级高。  
		}
	};
	vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {
		vector<pair<int, int>> res;
		if (buildings.empty())
			return res;
		priority_queue<vector<int>,vector<vector<int>>,cmp> extra;
		vector<int> cur(buildings[0]);
		res.push_back(pair<int, int>(cur[0], cur[2]));
		for (int i = 1; i < buildings.size(); i++)
		{
			while (!extra.empty() && extra.top()[0] <= buildings[i][0])
			{
				solve(res, extra, cur, extra.top());
				extra.pop();
			}
			solve(res, extra, cur, buildings[i]);
		}
		while (!extra.empty())
		{
			solve(res, extra, cur, extra.top());
			extra.pop();
		}
		res.push_back(pair<int, int>(cur[1], 0));
		return res;
	}
	void solve(vector<pair<int, int>>& res, priority_queue<vector<int>, vector<vector<int>>, cmp>& extra, vector<int>& cur, vector<int> compare)
	{
		if (compare[0] > cur[1])
		{
			res.push_back(pair<int, int>(cur[1], 0));
			res.push_back(pair<int, int>(compare[0], compare[2]));
			cur.assign(compare.begin(), compare.end());
			return;
		}
		else
		{
			if (compare[2] == cur[2])
				cur[1] = max(compare[1], cur[1]);
			else if (compare[2] > cur[2])
			{
				if (compare[0] == cur[0])
					res.back().second = compare[2];
				else
					res.push_back(pair<int, int>(compare[0], compare[2]));
				if (compare[1] < cur[1])
				{
					vector<int> temp;
					temp.push_back(compare[1]);
					temp.push_back(cur[1]);
					temp.push_back(cur[2]);
					extra.push(temp);
				}
				cur.assign(compare.begin(), compare.end());
			}
			else
			{
				if (compare[0] == cur[1])
				{
					res.push_back(pair<int, int>(compare[0], compare[2]));
					cur.assign(compare.begin(), compare.end());
					return;
				}
				if (compare[1] > cur[1])
				{
					vector<int> temp;
					temp.push_back(cur[1]);
					temp.push_back(compare[1]);
					temp.push_back(compare[2]);
					extra.push(temp);
				}
			}
		}
		return;
    }
};
