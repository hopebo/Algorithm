title:
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

my solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (head && head->next)
		{
			ListNode* f = head;
			ListNode* l = head->next;
			head = l;
			f->next = l->next;
			l->next = f;
			ListNode* p = f->next;
			while (p != NULL && (l = p->next) != NULL)
			{
				f->next = l;
				p->next = l->next;
				l->next = p;
				f = p;
				p = f->next;
			}
		}
		return head;
    }
};

best solution://递归的方式
class Solution {
public:
	ListNode* swapPairs(ListNode* head) {
		if (head && head->next)
		{
			ListNode* n = head->next;
			head->next = swapPairs(head->next->next);
			n->next = head;
			return n;
		}
		else
			return head;
	}
};
