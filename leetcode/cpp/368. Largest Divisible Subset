class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        vector<int> res;
		if (nums.empty())
			return res;
		int len = nums.size(), max_length = 1, index = 0;
		sort(nums.begin(), nums.end());
		vector<int> pre(len, -1);
		vector<int> length(len, 1);
		for (int i = 1; i < len; i++)
		{
			for (int j = 0; j < i; j++)
			{
				if (nums[i] % nums[j] == 0 && length[j] + 1 > length[i])
				{
					length[i] = length[j] + 1;
					pre[i] = j;
				}
			}
			if (length[i] > max_length)
			{
				max_length = length[i];
				index = i;
			}
		}
		while (index != -1)
		{
			res.push_back(nums[index]);
			index = pre[index];
		}
		return res;
    }
};
