/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
	int maxPoints(vector<Point>& points) {
		if (points.empty())
			return 0;
		int max_num = 1, len = points.size();
		for (int i = 0; i < len; i++)
		{
			map<long double, int> amount;
			int same_point = 1;
			for (int j = i + 1; j < len; j++)
			{
				long double slope;
				if (points[j].x == points[i].x)
				{
					if (points[j].y == points[i].y)
					{
						same_point++;
						continue;
					}
					else
						slope = INT_MAX;
				}
				else
				{
					slope =(long double)(points[j].y - points[i].y) / (long double)(points[j].x - points[i].x);
				}
				if (amount.count(slope))
					amount[slope]++;
				else
					amount[slope] = 1;
			}
			int max_local = 0;
			for (map<long double, int>::iterator it = amount.begin(); it != amount.end(); it++)
				max_local = max(max_local, it->second);
			max_num = max(max_num, max_local + same_point);
		}
		return max_num;
	}
};
