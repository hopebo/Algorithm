class Solution {
public:
    vector<double> medianSlidingWindow(vector<int>& nums, int k) {
        vector<double> medians;
        if (nums.size() < k)
            return medians;
        int i = 0;
        priority_queue<int> bheap;
        priority_queue<int, vector<int>, greater<int>> sheap;
        map<int, int> del;
        for (; i < k; i++)
            bheap.push(nums[i]);
        for (int j = 0; j < k/2; j++)
        {
            sheap.push(bheap.top());
            bheap.pop();
        }
        do {
            if (k % 2)
                medians.push_back(bheap.top());
            else
                medians.push_back(((long long)bheap.top()+sheap.top())/2.0);
            int balance = 0, toDel = nums[i-k];
            if (toDel <= bheap.top())	
            	{balance--;	if (toDel == bheap.top())	bheap.pop();	else	del[toDel]++;}
            else	
            	{balance++; if (toDel == sheap.top())	sheap.pop();	else	del[toDel]++;}
            if (nums[i] <= bheap.top())	
            	{balance++; bheap.push(nums[i]);}
            else	
            	{balance--; sheap.push(nums[i]);}
            if (balance > 0)
            	{sheap.push(bheap.top());	bheap.pop();}
            else if (balance < 0)
            	{bheap.push(sheap.top());	sheap.pop();}
            while (!bheap.empty() && del[bheap.top()])	{del[bheap.top()]--;	bheap.pop();}
            while (!sheap.empty() && del[sheap.top()])	{del[sheap.top()]--;	sheap.pop();}
        }	while (i++ < nums.size());
        return medians;
    }
};
