class Trie {
private:
	struct node {
		bool ifword;
		node *nextletter[26] = { NULL };
		node() { ifword = false; }
	};
	node *root;
public:
	/** Initialize your data structure here. */
	Trie() {
		root = new node();
	}

	/** Inserts a word into the trie. */
	void insert(string word) {
		if (word.empty())
			return;
		node *p = root;
		for (int i = 0; i < word.size(); i++)
		{
			int digit = word[i] - 'a';
			if (p->nextletter[digit] == NULL)
			{
				p->nextletter[digit] = new node();
			}
			p = p->nextletter[digit];
			if (i == word.size() - 1)
				p->ifword = true;
		}
		return;
	}

	/** Returns if the word is in the trie. */
	bool search(string word) {
		if (word.empty())
			return true;
		node *p = root;
		for (int i = 0; i < word.size(); i++)
		{
			if (p->nextletter[word[i] - 'a'] == NULL)
				return false;
			else
				p = p->nextletter[word[i] - 'a'];
			if (i == word.size() - 1)
				return p->ifword;
		}
	}

	/** Returns if there is any word in the trie that starts with the given prefix. */
	bool startsWith(string prefix) {
		if (prefix.empty())
			return true;
		node *p = root;
		for (int i = 0; i < prefix.size(); i++)
		{
			if (p->nextletter[prefix[i] - 'a'] == NULL)
				return false;
			p = p->nextletter[prefix[i] - 'a'];
		}
		return true;
	}
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */
