class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
		if (s.empty())
			return res;
		vector<string> ans;
		solve(res, ans, s, 0, s.size());
		return res;
	}
	void solve(vector < vector<string>>& res, vector<string> ans, string s, int begin, int len)
	{
		if (begin == len)
		{
			res.push_back(ans);
			return;
		}
		for (int num = 1; num <= len - begin; num++)
		{
			string temp = s.substr(begin, num);
			if (ispalindrome(temp))
			{
				ans.push_back(temp);
				solve(res, ans, s, begin + num, len);
				ans.pop_back();
			}
		}
		return;
	}
	bool ispalindrome(string word)
	{
		int i = 0, j = word.size() - 1;
		while (i < j)
		{
			if (word[i++] == word[j--])
				continue;
			else
				return false;
		}
		return true;
    }
};
