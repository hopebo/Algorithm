class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> ans;
        map<string,int> word; //用map存储词向量中的词语以及出现次数
        int cnt = words.size();
        int n = s.size();
        if (n == 0)
            return ans;
        if (cnt == 0)
        {
            ans.push_back(0);
            return ans;
        }
        int wl = words[0].size();
        for (int i = 0;i < cnt;i++)
            word[words[i]]++;
        for (int i = 0;i < wl;i++)
        {
            map<string,int> temp;
            int count = 0;
            for (int j = i;j <= n-(cnt-count)*wl;j+=wl)
            {
                string subword = s.substr(j,wl);
                if(word[subword])//如果当前位置的词语在word中存在，则有用，加入temp中，同时观察其出现次数是否超出word中的总次数，如果没有超出，则继续循环；如果超出，则必须调整字符串的起始位置，以探索新的字符串。
                {
                    count++;
                    temp[subword]++;
                    if(temp[subword] <= word[subword])
                    {
                        if (count == cnt)
                        {
                            ans.push_back(j-(count-1)*wl);
                            string beginword = s.substr(j-(count-1)*wl,wl);
                            count--;
                            temp[beginword]--;
                        }
                    }
                    else
                    {
                       while(temp[subword] > word[subword])
                       {
                           temp[s.substr(j-(count-1)*wl,wl)]--;
                           count--;
                       }
                    }
                }
                else//如果不存在，则从当前位置开启新的字符串
                {
                    temp.clear();
                    count = 0;
                }
            }
        }
        return ans;
    }
};
