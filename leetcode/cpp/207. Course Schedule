class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        if (numCourses < 2)
			return true;
		vector<vector<int>> matrix(numCourses, vector<int>(numCourses, 0));
		vector<int> indegree(numCourses, 0);
		for (int i = 0; i < prerequisites.size(); i++)
		{
			int prev = prerequisites[i].second;
			int cur = prerequisites[i].first;
			matrix[prev][cur] = 1;
			indegree[cur]++;
		}
		queue<int> study;
		int count = 0;
		for (int i = 0; i < indegree.size(); i++)
		{
			if (indegree[i] == 0)
				study.push(i);
		}
		while (!study.empty())
		{
			int len = study.size();
			for (int i = 0; i < len; i++)
			{
				int num = study.front();
				for (int j = 0; j < numCourses; j++)
				{
					if (matrix[num][j] == 1)
					{
						indegree[j]--;
						if (indegree[j] == 0)
							study.push(j);
					}
				}
				study.pop();
				count++;
			}
		}
		return count == numCourses;
    }
};
