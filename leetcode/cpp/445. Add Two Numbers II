/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *p1 = l1, *p2 = l2, *res = NULL;
        int n1 = calLength(l1), n2 = calLength(l2);
        while (n1 > 0 || n2 > 0)
        {
            int sum = 0;
            if (n1 >= n2)
            {
                sum += p1->val;
                p1 = p1->next;
                n1--;
            }
            if (n2 > n1)
            {
                sum += p2->val;
                p2 = p2->next;
                n2--;
            }
            res = addToFront(sum, res);
        }
        int carry = 0;
        p1 = res;
        res = NULL;
        while (p1 || carry)
        {
            int sum = p1 ? carry + p1->val : carry;
            res = addToFront(sum%10, res);
            carry = sum/10;
            if (p1)
            {
                p2 = p1;
                p1 = p1->next;
                delete p2;
            }
        }
        return res;
    }
    int calLength(ListNode* l)
    {
        int len = 0;
        while (l)
        {
            len++;
            l = l->next;
        }
        return len;
    }
    ListNode* addToFront(int val, ListNode* head)
    {
        ListNode* p = new ListNode(val);
        p->next = head;
        return p;
    }
};
