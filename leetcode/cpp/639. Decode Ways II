class Solution {
public:
    int numDecodings(string s) {
        const int base = 1000000007;
        int len = s.size();
        vector<int> num(len + 1, 0);
        num[0] = 1;
        num[1] = s[0] == '*' ? 9 : (s[0] == '0' ? 0 : 1);
        for (int i = 1; i < len; i++)
        {
            if (s[i] == '0')
            {
                if (s[i-1] == '1' || s[i-1] == '2')
                    num[i+1] = num[i-1];
                else if (s[i-1] == '*')
                    num[i+1] = 2 * num[i-1] % base;
                else
                    return 0;
            }
            else if (s[i-1] == '0')
            {
                if (s[i] >= '1' && s[i] <= '9')
                    num[i+1] = num[i];
                else if (s[i] == '*')
                    num[i+1] = (9 * (long long)num[i]) % base;
            }
            else if (s[i-1] == '1')
            {
                if (s[i] >= '1' && s[i] <= '9')
                    num[i+1] = (num[i-1] + num[i]) % base;
                else if (s[i] == '*')
                    num[i+1] = (9 * (long long)num[i-1] + 9 * (long long)num[i]) % base;
            }
            else if (s[i-1] == '2')
            {
                if (s[i] >= '1' && s[i] <= '6')
                    num[i+1] = (num[i-1] + num[i]) % base;
                else if (s[i] >= '7' && s[i] <= '9')
                    num[i+1] = num[i];
                else if (s[i] == '*')
                    num[i+1] = (6 * (long long)num[i-1] + 9 * (long long)num[i]) % base;
            }
            else if (s[i-1] >= '3' && s[i-1] <= '9')
            {
                if (s[i] >= '1' && s[i] <= '9')
                    num[i+1] = num[i];
                else if (s[i] == '*')
                    num[i+1] = (9 * (long long)num[i]) % base;
            }
            else if (s[i-1] == '*')
            {
                if (s[i] >= '1' && s[i] <= '6')
                    num[i+1] = (2 * (long long)num[i-1] + num[i]) % base;
                else if (s[i] >= '7' && s[i] <= '9')
                    num[i+1] = (num[i-1] + num[i]) % base;
                else if (s[i] == '*')
                    num[i+1] = (15 * (long long)num[i-1] + 9 * (long long)num[i]) % base;
            }
        }
        return num[len];
    }
};
