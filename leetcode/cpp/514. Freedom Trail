class Solution {
public:
    int findRotateSteps(string ring, string key) {
        int length = ring.size();
        vector<vector<int> > location(26, vector<int>());
        for (int i = 0; i < length; i++)
            location[ring[i]-'a'].push_back(i);
        vector<int> curStep(1, 0);
        vector<int> preStep(1, 0);
        char prev = ring[0], cur;
        for (int i = 0; i < key.size(); i++)
        {
            cur = key[i];
            if (cur == prev)
                continue;
            curStep.clear();
            int index = cur - 'a', preIndex = prev - 'a';
            for (int j = 0; j < location[index].size(); j++)
            {
                int minStep = INT_MAX;
                for (int k = 0; k < preStep.size(); k++)
                {
                    int temp = abs(location[index][j]-location[preIndex][k]);
                    minStep = min(minStep, preStep[k]+min(temp, length-temp));
                }
                curStep.push_back(minStep);
            }
            preStep.assign(curStep.begin(), curStep.end());
            prev = cur;
        }
        int res = INT_MAX;
        for (auto step : curStep)
            res = min(res, step);
        return res + key.size();
    }
};
