class Solution {
public:
    vector<vector<int>> palindromePairs(vector<string>& words) {
        vector<vector<int>> res;
		if (words.size() < 2)
			return res;
		map<string, int> rev_words;
		for (int i = 0; i < words.size(); i++)
		{
			string temp = words[i];
			reverse(temp.begin(), temp.end());
			rev_words[temp] = i;
		}
		for (int i = 0; i < words.size(); i++)
		{
			for (int j = 0; j <= words[i].size(); j++)
			{
				string left = words[i].substr(0, j), right = words[i].substr(j);
				vector<int> ans(2, 0);
				if (ispanlindrome(left) && rev_words.count(right) && rev_words[right] != i)
				{
					ans[0] = rev_words[right];
					ans[1] = i;
					res.push_back(ans);
				}
				if (!right.empty() && ispanlindrome(right) && rev_words.count(left) && rev_words[left] != i)
				{
					ans[0] = i;
					ans[1] = rev_words[left];
					res.push_back(ans);
				}
			}
		}
		return res;
	}
	bool ispanlindrome(string word)
	{
		int i = 0, j = int(word.size()) - 1;
		while (i < j)
		{
			if (word[i++] != word[j--])
				return false;
		}
		return true;
    }
};
