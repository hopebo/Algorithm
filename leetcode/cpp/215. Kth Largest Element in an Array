class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if (nums.size() < k || nums.empty())
			return -1;
		int left = 0, right = nums.size() - 1;
		while (left < right)
		{
			int pivot = partion(nums, left, right);
			if (pivot < k - 1)
				left = pivot + 1;
			else if (pivot > k - 1)
				right = pivot - 1;
			else
				return nums[pivot];
		}
		return nums[left];
	}
	int partion(vector<int>& nums, int left, int right)
	{
		int pivot = nums[left], i = left, j = right;
		while (i < j)
		{
			while (i < j && nums[j] <= pivot)
				j--;
			nums[i] = nums[j];
			while (i < j && nums[i] >= pivot)
				i++;
			nums[j] = nums[i];
		}
		nums[i] = pivot;
		return i;
    }
};
