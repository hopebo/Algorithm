class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        if (words.empty())
			return words;
		int i = 0, j = 0, len = words.size();
		vector<string> ans;
		while (i < len)
		{
			int sumLength = words[i].size();
			j = i;
			while (j < len - 1 && (sumLength + words[j + 1].size() + j - i + 1 <= maxWidth))
			{
				j++;
				sumLength += words[j].size();
			}
			string line(words[i]);
			for (int m = i+1;m <= j;m++)
			{
				if (j >= len-1)
					line.push_back(' ');
				else
				{
					line += string((maxWidth - sumLength) / (j - i), ' ');
					if (m - i <= (maxWidth - sumLength) % (j - i))
						line.push_back(' ');
				}
				line += words[m];
			}
			line += string((maxWidth - line.size()), ' ');
			ans.push_back(line);
			i = j + 1;
		}
		return ans;
    }
};
