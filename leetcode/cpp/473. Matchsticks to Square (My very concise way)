class Solution {
public:
    bool makesquare(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        long long sum = 0;
        for (int num : nums)
            sum += num;
        if (sum % 4 || sum == 0)
            return false;
        int length = sum / 4;
        vector<bool> canUse(nums.size(), true);
        bool res = false;
        return link(nums, canUse, 0, 0, length, 1, res);
    }
    bool link(vector<int>& nums, vector<bool>& canUse, int start, int curSum, int length, int index, bool& res)
    {
        if (curSum == length)
            return true;
        int prev = INT_MIN;
        for (int i = start; i < nums.size(); i++)
        {
            if (nums[i] > length - curSum)
                return false;
            if (canUse[i] && nums[i] != prev)
            {
                canUse[i] = false;
                if (link(nums, canUse, i+1, curSum+nums[i], length, index, res))
                {
                    if (res || index == 3 || link(nums, canUse, 0, 0, length, index+1, res))
                    {
                        res = true;
                        return true;
                    }
                }
                canUse[i] = true;
                prev = nums[i];
            }
        }
        return false;
    }
};
