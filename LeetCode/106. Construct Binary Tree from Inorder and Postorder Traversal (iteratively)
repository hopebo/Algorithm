/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if (inorder.empty())
            return NULL;
        stack<TreeNode*> node;
        int len = inorder.size(), i = len-2, j = len-1, flag = 1; //i denotes postorder, j denotes inorder
        //flag(1) right flag(0) left 
        TreeNode* root = new TreeNode(postorder[len-1]);
        node.push(root);
        TreeNode* pre;
        while (!node.empty())
        {
            pre = node.top();
            while(!node.empty() && j >= 0 && node.top()->val == inorder[j])
            {
                pre = node.top();
                flag = 0;
                node.pop();
                j--;
            }
            if (i >= 0)
            {
                TreeNode* p = new TreeNode(postorder[i--]);
                node.push(p);
                if (flag == 0)
                {
                    pre->left = p;
                    flag = 1;
                }
                else
                {
                    pre->right = p;
                }
            }
        }
        return root;
    }
};
