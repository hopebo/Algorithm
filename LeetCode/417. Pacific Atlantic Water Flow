class Solution {
public:
    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {
        vector<pair<int, int>> res;
        if (matrix.empty() || matrix[0].empty())
            return res;
        int row = matrix.size(), col = matrix[0].size();
        vector<vector<int>> water(row, vector<int>(col, 0));
        for (int i = 0; i < row; i++)
            flow(water, matrix, i, 0, row, col, 0);
        for (int j = 1; j < col; j++)
            flow(water, matrix, 0, j, row, col, 0);
        for (int i = 0; i < row; i++)
            flow(water, matrix, i, col-1, row, col, 1);
        for (int j = 0; j < col-1; j++)
            flow(water, matrix, row-1, j, row, col, 1);
        for (int i = 0; i < row; i++)
            for (int j = 0; j < col; j++)
                if (water[i][j] == 3)
                    res.push_back(pair<int, int>(i, j));
        return res;
    }
    int direction[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    void flow(vector<vector<int>>& water, vector<vector<int>>& matrix, int i, int j, int row, int col, int state)
    {
        if (state == 0)
            water[i][j] = 1;
        else
        {
            if (water[i][j] == 1)
                water[i][j] = 3;
            else if (water[i][j] == 0)
                water[i][j] = 2;
        }
        for (auto dir : direction)
        {
            int next_i = i+dir[0], next_j = j+dir[1];
            if (next_i < 0 || next_i >= row || next_j < 0 || next_j >= col || matrix[next_i][next_j] < matrix[i][j])
                continue;
            if (state == 0 && water[next_i][next_j] == 0 || state == 1 && (water[next_i][next_j] == 1 || water[next_i][next_j] == 0))
                flow(water, matrix, next_i, next_j, row, col, state);
        }
        return;
    }
};
