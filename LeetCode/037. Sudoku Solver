class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        bool flag=solve(board);
		return;
    }
    bool solve(vector<vector<char>>& board) {
		vector<int> option;
		int ans = sortoption(board, option);
		if (ans == -1)
			return false;
		else
		{
			if (ans == 100)
				return true;
			int i = ans / 9, j = ans % 9;
			for (vector<int>::iterator it = option.begin(); it != option.end(); it++)
			{
				board[i][j] = char(*it - 1 + '1');
				if (solve(board))
					return true;
				else
					board[i][j] = '.';
			}
		}
		return false;
	}
	int sortoption(vector<vector<char>>& board, vector<int>& option) {//寻找可填入数序列最短的位置，减少无谓的实验次数		
    int ans,min=10;//-1表示不能继续进行，存在某点可填入数字向量为空;100表示所有点都填满;其他数字表示可填入列表最短的点的位置
		int row[9][9] = { 0 }, column[9][9] = { 0 }, subarea[9][9] = { 0 };
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				if (board[i][j] != '.')
				{
					int no = board[i][j] - '1';
					int part = i / 3 * 3 + j / 3;
					row[i][no] = column[j][no] = subarea[part][no] = 1;				
				}
			}
		}
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				if (board[i][j] == '.')
				{
					vector<int> temp(validnum(row, column, subarea, i, j));
					int len = temp.size();
					if (len==0)
						return -1;
					else if (len < min)
					{
						min = len;
						ans = i * 9 + j;
						option.assign(temp.begin(), temp.end());
					}
				}
			}
		}
		if (min == 10)
			return 100;
		else
			return ans;
	}
	vector<int> validnum(int row[][9],int column[][9],int subarea[][9],int i,int j) {//返回指定位置可填入的数序列		
    vector<int> valid;		
		int part = i / 3 * 3 + j / 3;
		for (int p = 1; p < 10; p++)
		{
			if (row[i][p - 1] || column[j][p - 1] || subarea[part][p - 1])
				continue;
			else
				valid.push_back(p);
		}
		return valid;
	}
};
