class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int res = 0;
        if (nums.size() < 2)
            return res;
        partition(nums, res, 0, nums.size()-1);
        return res;
    }
    void partition(vector<int>& nums, int& res, int start, int end) {
        if (start >= end)
            return;
        int mid = (start + end) / 2;
        partition(nums, res, start, mid);
        partition(nums, res, mid+1, end);
        int count = 0, i = start, j = mid+1, k = mid+1;
        vector<int> temp;
        for (; i <= mid; i++)
        {
            while (k <= end && nums[i] > 2*(long long)nums[k])
                k++;
            count += k-mid-1;
            while (j <= end && nums[i] > nums[j])
                temp.push_back(nums[j++]);
            temp.push_back(nums[i]);
        }
        res += count;
        for (k = 0; k < temp.size(); k++)
            nums[start+k] = temp[k];
        return;
    }
};
