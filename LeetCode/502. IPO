class Solution {
public:
    struct cmp {
        bool operator()(pair<int, int>& compare1, pair<int, int>& compare2) {
            return compare1.first > compare2.first;
        }
    };
    int findMaximizedCapital(int k, int W, vector<int>& Profits, vector<int>& Capital) {
        priority_queue<int> Pro;
        priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> Cap;
        for (int i = 0; i < Capital.size(); i++)
        {
            Cap.push(pair<int, int>(Capital[i], Profits[i]));
        }
        for (; k > 0; k--)
        {
            while (!Cap.empty() && Cap.top().first <= W)
            {
                if (Cap.top().second > 0)
                    Pro.push(Cap.top().second);
                Cap.pop();
            }
            if (Pro.empty())
                break;
            W += Pro.top();
            Pro.pop();
        }
        return W;
    }
};
