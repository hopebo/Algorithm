class Solution {
public:
    int removeBoxes(vector<int>& boxes) {
        if (boxes.empty())
            return 0;
        int dp[100][100][100] = {0};
        return dfs(boxes, dp, 0, boxes.size()-1, 0);
    }
    int dfs(vector<int>& boxes, int dp[100][100][100], int l, int r, int k) {
        if (l > r)
            return 0;
        if (dp[l][r][k] > 0)
            return dp[l][r][k];
        int res = 0;
        while(r > l && boxes[r-1] == boxes[r])
        {
            r--;
            k++;
        }
        res = max(res, dfs(boxes, dp, l, r-1, 0) + (k + 1) * (k + 1));
        for (int m = r-1; m >= l; m--)
        {
            if (boxes[m] == boxes[r])
                res = max(res, dfs(boxes, dp, l, m, k+1) + dfs(boxes, dp, m+1, r-1, 0));
        }
        dp[l][r][k] = res;
        return res;
    }
};
