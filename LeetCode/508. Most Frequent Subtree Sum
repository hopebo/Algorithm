/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int> res;
        if (root == NULL)
            return res;
        map<int, int> count;
        int maxFreq = 0;
        sumSubTree(count, root, maxFreq);
        for (auto it : count)
            if (it.second == maxFreq)
                res.push_back(it.first);
        return res;
    }
    int sumSubTree(map<int, int>& count, TreeNode* root, int& maxFreq) {
        if (root == NULL)
            return 0;
        int leftSum = sumSubTree(count, root->left, maxFreq);
        int rightSum = sumSubTree(count, root->right, maxFreq);
        int curSum = leftSum + root->val + rightSum;
        if (++count[curSum] > maxFreq)
            maxFreq = count[curSum];
        return curSum;
    }
};
