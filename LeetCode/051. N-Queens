class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
		vector<string> site;
		string initial(n, '.');
		for (int i = 0; i < n; i++)
			site.push_back(initial);
		vector<int> column(n, 0);
		vector<int> bias45(2 * n - 1, 0);
		vector<int> bias135(2 * n - 1, 0);
		solve(ans, site, column, bias45, bias135, 0, n);
		return ans;
	}
	void solve(vector<vector<string>>& ans, vector<string>& site, vector<int>& column, vector<int>& bias45, vector<int>& bias135, int i, int n)
	{
		if (i >= n)
		{
			ans.push_back(site);
			return;
		}
		for (int j = 0; j < n; j++)
		{
			if (isvalid(column, bias45, bias135, i, j, n))
			{
				site[i][j] = 'Q';
				column[j] = 1;
				bias45[i + j] = 1;
				bias135[i-j+n-1] = 1;
				solve(ans, site, column, bias45, bias135, i + 1, n);
				site[i][j] = '.';
				column[j] = 0;
				bias45[i + j] = 0;
				bias135[i-j+n-1] = 0;
			}
		}
		return;
	}
	bool isvalid(vector<int>& column, vector<int>& bias45, vector<int>& bias135, int i, int j, int n)
	{
		if (bias45[i+j] || column[j] || bias135[i-j+n-1])
			return false;
		else
			return true;
    }
};
