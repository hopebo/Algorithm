class Solution {
public:
	struct cmp {
		bool operator()(pair<int, int>& compare1, pair<int, int>& compare2)
		{
			if (compare1.first > compare2.first)
				return true;
			else if (compare1.first == compare2.first)
				return compare1.second > compare2.second;
			else
				return false;
		}
	};
	vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
		vector<pair<int, int>> res;
		if (k == 0 || nums1.empty() || nums2.empty())
			return res;
		int len1 = nums1.size(), len2 = nums2.size();
		int last_index = 0;
		vector<int> index(len1, 0);
		priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> queue;
		queue.push(pair<int, int>(nums1[0] + nums2[0], 0));
		while (k != 0 && !queue.empty())
		{
			pair<int, int> helper(queue.top());
			queue.pop();
			res.push_back(pair<int, int>(nums1[helper.second], nums2[index[helper.second]++]));
			k--;
			if (index[helper.second] < len2)
				queue.push(pair<int, int>(nums1[helper.second] + nums2[index[helper.second]], helper.second));
			if (helper.second == last_index && last_index != len1-1)
			{
				last_index++;
				queue.push(pair<int, int>(nums1[last_index] + nums2[0], last_index));
			}
		}
		return res;
	}
};
