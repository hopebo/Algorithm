class Solution {
private:
    int direction[4][2] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
public:
	int longestIncreasingPath(vector<vector<int>>& matrix) {
		if (matrix.empty())
			return 0;
		int m = matrix.size(), n = matrix[0].size();
		vector<vector<int> > cache(m, vector<int>(n, 0));
		int res = 1;
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < n; j++)
				res = max(res, solve(matrix, cache, i, j, m, n));
		}
		return res;
	}
	int solve(vector<vector<int> >& matrix, vector<vector<int>>& cache, int i, int j, int m, int n)
	{
		if (cache[i][j] != 0)
			return cache[i][j];
		cache[i][j] = 1;
		for (int k = 0; k < 4; k++)
		{
			int row = i + direction[k][0], column = j + direction[k][1];
			if (row < 0 || column < 0 || row >= m || column >= n || matrix[row][column] <= matrix[i][j])
				continue;
			cache[i][j] = max(cache[i][j], 1 + solve(matrix, cache, row, column, m, n));
		}
		return cache[i][j];
	}
};
