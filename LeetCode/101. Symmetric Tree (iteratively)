/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == NULL)
			return true;
		vector<TreeNode*> pointer1;
		vector<TreeNode*> pointer2;
		TreeNode* p1 = root->left, *p2 = root->right;
		while (!pointer1.empty() || (p1 != NULL || p2 != NULL))
		{
			while (p1 != NULL && p2 != NULL)
			{
				if (p1->val == p2->val)
				{
					pointer1.push_back(p1);
					pointer2.push_back(p2);
					p1 = p1->left;
					p2 = p2->right;
				}
				else
					return false;
			}
			if (p1 == NULL && p2 != NULL || p1 != NULL && p2 == NULL)
				return false;
			if (!pointer1.empty())
			{
				p1 = pointer1.back()->right;
				p2 = pointer2.back()->left;
				pointer1.pop_back();
				pointer2.pop_back();
			}
		}
		return true;
    }
};
