/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res = "";
        if (!root)
            return res;
        res += to_string(root->val);
        helper(root->left, res);
        helper(root->right, res);
        return res;
    }
    
    void helper(TreeNode* root, string& res)
    {
        if (!root)
            return;
        res += " " + to_string(root->val);
        helper(root->left, res);
        helper(root->right, res);
        return;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if (data.empty())
            return NULL;
        istringstream in(data);
        string num;
        in >> num;
        TreeNode* root = new TreeNode(stoi(num));
        TreeNode* p = NULL;
        stack<TreeNode*> node;
        node.push(root);
        while (in >> num)
        {
            int digit = stoi(num);
            TreeNode *temp = new TreeNode(digit);
            if (digit < node.top()->val)
            {
                node.top()->left = temp;
            }
            else
            {   
                while (!node.empty() && digit > node.top()->val)
                {
                    p = node.top();
                    node.pop();
                }
                p->right = temp;
            }
            node.push(temp);
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
