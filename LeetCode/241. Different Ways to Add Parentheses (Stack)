class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        vector<int> res;
		if (input.empty())
			return res;
		int i = 0;
		stack<int> process;
		process.push(getnum(input, i));
		solve(res, process, input.substr(i));
		return res;
	}
	void solve(vector<int>& res, stack<int> process, string input)
	{
		if (input.empty())
		{
			while (process.size() > 1)
			{
				int num2 = process.top();
				process.pop();
				int sign = process.top();
				process.pop();
				int num1 = process.top();
				process.pop();
				process.push(calculate(num1, num2, sign));
			}
			res.push_back(process.top());
			return;
		}
		bool first = true;
		while (process.size() >= 1)
		{
			if (!first)
			{
				if (process.size() == 1)
					break;
				else
				{
					int num2 = process.top();
					process.pop();
					int sign = process.top();
					process.pop();
					int num1 = process.top();
					process.pop();
					process.push(calculate(num1, num2, sign));
				}
			}
			else
				first = false;
			stack<int> temp(process);
			int sign = 1;
			if (input[0] == '+')
				sign = 1;
			else if (input[0] == '-')
				sign = 2;
			else
				sign = 3;
			temp.push(sign);
			int i = 1;
			temp.push(getnum(input, i));
			solve(res, temp, input.substr(i));
		}
		return;
	}
	int calculate(int num1, int num2, int sign)
	{
		if (sign == 1)
			return num1 + num2;
		else if (sign == 2)
			return num1 - num2;
		else
			return num1 * num2;
	}
	int getnum(string input, int& i)
	{
		int num = 0;
		while (i < input.size() && input[i] >= '0' && input[i] <= '9')
		{
			num = num * 10 + int(input[i] - '0');
			i++;
		}
		return num;
    }
};
