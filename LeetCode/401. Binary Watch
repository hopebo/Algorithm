class Solution {
public:
    vector<string> readBinaryWatch(int num) {
        vector<int> ans;
		solve(ans, 0, num, 10);
		return transfer(ans);
	}
	void solve(vector<int>& ans, int digit, int num, int level)
	{
		if (num == 0)
		{
			ans.push_back(digit << level);
			return;
		}
		solve(ans, (digit << 1) | 1, num - 1, level - 1);
		if (level > num)
			solve(ans, digit << 1, num, level - 1);
		return;
	}
	vector<string> transfer(vector<int>& ans)
	{
		vector<string> res;
		for (int i = 0; i < ans.size(); i++)
		{
			int minutes = ans[i] & 63;
			int hour = ans[i] >> 6;
			if (hour > 11 || minutes > 59)
				continue;
			string temp = to_string(minutes);
			if (temp.size() == 1)
				temp.insert(temp.begin(), '0');
			res.push_back(to_string(hour) + ":" + temp);
		}
		return res;
	}
};
