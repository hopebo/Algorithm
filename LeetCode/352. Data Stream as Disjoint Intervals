/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class SummaryRanges {
private:
	vector<Interval> range;
public:
	/** Initialize your data structure here. */
	SummaryRanges() {

	}

	void addNum(int val) {
		if (range.empty())
		{
			range.push_back(Interval(val, val));
			return;
		}
		int low = 0, high = range.size() - 1;
		while (low < high)
		{
			int mid = ceil(((float)low + high) / 2);
			if (val == range[mid].start)
				return;
			else if (val > range[mid].start)
				low = mid;
			else
				high = mid - 1;
		}
		if (val < range[low].start)
		{
		    if (val == range[low].start-1)
		        range[low].start--;
		    else
			    range.insert(range.begin()+low, Interval(val, val));
		}
		else
		{
			if (val > range[low].end)
			{
				if (val == range[low].end + 1 && (low < range.size() - 1 && val == range[low + 1].start - 1))
				{
					range[low].end = range[low + 1].end;
					range.erase(range.begin() + low + 1);
				}
				else if (val == range[low].end + 1)
					range[low].end++;
				else if (low < range.size() - 1 && val == range[low + 1].start - 1)
					range[low + 1].start--;
				else
					range.insert(range.begin() + low + 1, Interval(val, val));
			}
		}
		return;
	}

	vector<Interval> getIntervals() {
		return range;
	}
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * vector<Interval> param_2 = obj.getIntervals();
 */
