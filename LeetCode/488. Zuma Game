class Solution {
public:
    int findMinStep(string board, string hand) {
        map<char, int> remain;
        for (char a : hand)
            remain[a]++;
        return insertBall(board+"#", remain);
    }
    int insertBall(string board, map<char, int>& remain) {
        board = removeConsecutive(board);
        if (board.size() == 1)
            return 0;
        int minInsert = INT_MAX, j = 0;
        for (int i = 0; i < board.size(); i++)
        {
            if (board[i] == board[j])
                continue;
            int num = 3 - (i - j);
            if (remain[board[j]] >= num)
            {
                remain[board[j]] -= num;
                int nextStep = insertBall(board.substr(0, j)+board.substr(i), remain);
                if (nextStep != -1)
                    minInsert = min(minInsert, num + nextStep);
                remain[board[j]] += num;
            }
            j = i;
        }
        return minInsert == INT_MAX ? -1 : minInsert;
    }
    string removeConsecutive(string board) {
        int j = 0;
        for (int i = 0; i < board.size(); i++)
        {
            if (board[i] == board[j])
                continue;
            if (i - j >= 3)
                return removeConsecutive(board.substr(0, j)+board.substr(i));
            else
                j = i;
        }
        return board;
    }
};
