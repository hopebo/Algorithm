/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

	// Encodes a tree to a single string.
	string serialize(TreeNode* root) {
		ostringstream out;
		serial(root, out);
		return out.str();
	}

	void serial(TreeNode* root, ostringstream& out)
	{
		if (root != NULL)
		{
			out << root->val << ' ';
			serial(root->left, out);
			serial(root->right, out);
		}
		else
			out << "# ";
		return;
	}

	// Decodes your encoded data to tree.
	TreeNode* deserialize(string data) {
		istringstream in(data);
		TreeNode* root = deserial(in);
		return root;		
	}

	TreeNode* deserial(istringstream& in)
	{
		string val;
		in >> val;
		if (val == "#")
			return NULL;
		TreeNode* root = new TreeNode(stoi(val));
		root->left = deserial(in);
		root->right = deserial(in);
		return root;
	}
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
