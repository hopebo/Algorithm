/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
private:
	vector<TreeNode*> node;
public:
	BSTIterator(TreeNode *root) {
		pushAll(root);
	}

	/** @return whether we have a next smallest number */
	bool hasNext() {
		if (node.empty())
			return false;
		else
			return true;
	}

	/** @return the next smallest number */
	int next() {
		TreeNode *p = node.back();
		node.pop_back();
		pushAll(p->right);
		return p->val;
	}

	void pushAll(TreeNode *root) {
		while (root != NULL)
		{
			node.push_back(root);
			root = root->left;
		}
	}
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
