/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
private:
	map<int, UndirectedGraphNode*> dic;
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if (node == NULL)
			return NULL;
		UndirectedGraphNode *clone = new UndirectedGraphNode(node->label);
		dic[node->label] = clone;		
		for (int i = 0; i < node->neighbors.size(); i++)
		{
			if (dic.count(node->neighbors[i]->label))
				clone->neighbors.push_back(dic[node->neighbors[i]->label]);
			else
				clone->neighbors.push_back(cloneGraph(node->neighbors[i]));
		}
		return  clone;
    }
};
