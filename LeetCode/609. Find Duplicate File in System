class Solution {
public:
    vector<vector<string>> findDuplicate(vector<string>& paths) {
        vector<vector<string>> res;
        map<string, vector<string>> contentInfo;
        for (auto path : paths)
        {
            istringstream in(path);
            string filePath, fileInfo;
            in >> filePath;
            while (in >> fileInfo)
            {
                int begin = fileInfo.find_first_of('('), end = fileInfo.find_first_of(')', begin+1);
                string fileName = fileInfo.substr(0, begin), content = fileInfo.substr(begin+1, end-begin-1);
                contentInfo[content].push_back(filePath + "/" + fileName);
            }
        }
        for (auto record : contentInfo)
        {
            if (record.second.size() > 1)
                res.push_back(record.second);
        }
        return res;
    }
};
