class Solution {
public:
    int lengthLongestPath(string input) {
        if (input.empty())
			return 0;
		stringstream in(input);
		string dir;
		stack<int> length;
		int maxlength = 0, level = 0;
		while (getline(in, dir, '\n'))
		{
			string helper;
			stringstream temp(dir);
			while (getline(temp, helper, '\t'))
			{
				if (helper.empty())
					level++;
			}
			while (level < length.size())
				length.pop();
			if (dir.find(".", 0) == string::npos)
			{
				if (!length.empty())
					length.push(length.top() + helper.size());
				else
					length.push(helper.size());
			}
			else
			{
				if (!length.empty())
					maxlength = max(maxlength, length.top() + (int)length.size() + (int)helper.size());
				else
					maxlength = max(maxlength, (int)helper.size());
			}				
			level = 0;
		}
		return maxlength;
    }
};
