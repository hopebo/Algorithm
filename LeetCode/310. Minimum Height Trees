class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {
        if (n == 0)
			return vector<int>();
		if (n == 1)
			return vector<int>(1, 0);
		map<int, set<int> > connect;
		for (int i = 0; i < edges.size(); i++)
		{
			connect[edges[i].first].insert(edges[i].second);
			connect[edges[i].second].insert(edges[i].first);
		}
		vector<int> leaf;
		for (int i = 0; i < n; i++)
		{
			if (connect[i].size() == 1)
				leaf.push_back(i);
		}
		while (n > 2)
		{
			n -= leaf.size();
			vector<int> newleaf;
			for (int i = 0; i < leaf.size(); i++)
			{
				set<int>::iterator it = connect[leaf[i]].begin();
				connect[*it].erase(leaf[i]);
				if (connect[*it].size() == 1)
					newleaf.push_back(*it);
			}
			leaf.assign(newleaf.begin(), newleaf.end());
		}
		return leaf;
    }
};
