class Solution {
public:
    const int base = pow(10, 9) + 7;
    int findPaths(int m, int n, int N, int i, int j) {
        long long res = 0;
        vector<vector<int>> board(m, vector<int>(n, 0));
        board[i][j] = 1;
        for (int i = 0; i < N; i++)
        {
            res = (res + calPath(board, m, n)) % base;
            move(board, m, n);
        }
        return res;
    }
    int calPath(vector<vector<int>>& board, int m, int n) {
        long long num = 0;
        for (int i = 0, j = 0; j < n; j++)
            num = (num + board[i][j]) % base;
        for (int i = 0, j = n-1; i < m; i++)
            num = (num + board[i][j]) % base;
        for (int i = m-1, j = n-1; j >= 0; j--)
            num = (num + board[i][j]) % base;
        for (int i = m-1, j = 0; i >= 0; i--)
            num = (num + board[i][j]) % base;
        return (int)num;
    }
    void move(vector<vector<int>>& board, int m, int n) {
        vector<vector<int>> temp(m, vector<int>(n, 0));
        int direction[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                for (int k = 0; k < 4; k++)
                {
                    int row = i + direction[k][0], col = j + direction[k][1];
                    if (row < 0 || row >= m || col < 0 || col >= n)
                        continue;
                    temp[i][j] = ((long long)temp[i][j] + board[row][col]) % base;
                }
            }
        }
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                board[i][j] = temp[i][j];
        return;
    }
};
