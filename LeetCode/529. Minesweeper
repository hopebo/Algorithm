class Solution {
public:
    int move[8][2] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        int i = click[0], j = click[1];
        if (board[i][j] == 'M')
        {
            board[i][j] = 'X';
            return board;
        }
        queue<pair<int, int>> squares;
        squares.push(pair<int, int>(i, j));
        while (!squares.empty())
        {
            i = squares.front().first;
            j = squares.front().second;
            squares.pop();
            vector<pair<int, int>> toReveal;
            int numOfMines = calMines(board, toReveal, i, j, board.size(), board[0].size());
            if (numOfMines > 0)
                board[i][j] = '0' + numOfMines;
            else
            {
                board[i][j] = 'B';
                for (auto k : toReveal)
                {
                    board[k.first][k.second] = 'B';
                    squares.push(k);
                }
            }
        }
        return board;
    }
    int calMines(vector<vector<char>>& board, vector<pair<int, int>>& toReveal, int i, int j, int m, int n) {
        int numOfMines = 0;
        for (int k = 0; k < 8; k++)
        {
            int row = i + move[k][0], col = j + move[k][1];
            if (row < 0 || row >= m || col < 0 || col >= n)
                continue;
            if (board[row][col] == 'M' || board[row][col] == 'X')
                numOfMines++;
            else if (board[row][col] == 'E')
                toReveal.push_back(pair<int, int>(row, col));
        }
        return numOfMines;
    }
};
