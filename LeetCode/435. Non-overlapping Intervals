/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool cmp(Interval& compare1, Interval& compare2) {
        if (compare1.start < compare2.start)
            return true;
        else if (compare1.start == compare2.start)
            return compare1.end < compare2.end;
        else
            return false;
    }
    int eraseOverlapIntervals(vector<Interval>& intervals) {
        if (intervals.empty())
            return 0;
        sort(intervals.begin(), intervals.end(), cmp);
        int pre = 0, cur = 1, res = 0;
        for (; cur < intervals.size(); cur++)
        {
            if (intervals[cur].start >= intervals[pre].end)
            {
                pre = cur;
            }
            else
            {
                res++;
                if (intervals[cur].end < intervals[pre].end)
                    pre = cur;
            }
        }
        return res;
    }
};
