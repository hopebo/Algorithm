class Solution {
public:
    struct task {
        int id;
        int start_time;
        task(int a, int b){id = a;  start_time = b;};
    };
    vector<int> exclusiveTime(int n, vector<string>& logs) {
        vector<int> ex_time(n, 0);
        stack<task> function;
        for (string log : logs)
        {
            int colon_1 = log.find_first_of(':'), colon_2 = log.find_first_of(':', colon_1 + 1);
            int id = stoi(log.substr(0, colon_1)), time = stoi(log.substr(colon_2 + 1));
            string status = log.substr(colon_1 + 1, colon_2 - colon_1 - 1);
            if (status == "start")
            {
                task new_task(id, time);
                function.push(new_task);
            }
            else
            {
                int consume_time = time - function.top().start_time + 1;
                function.pop();
                ex_time[id] += consume_time;
                if (!function.empty())
                    ex_time[function.top().id] -= consume_time;
            }
        }
        return ex_time;
    }
};
