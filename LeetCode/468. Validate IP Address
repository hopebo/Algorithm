class Solution {
public:
    string validIPAddress(string IP) {
        int len = IP.size();
        if (len < 7)
            return "Neither";
        if (len < 15 || (len == 15 && IP[3] == '.'))
        {
            if (ipv4(IP))
                return "IPv4";
        }
        else if (len > 15 || (len == 15 && IP[1] == ':'))
        {
            if (ipv6(IP))
                return "IPv6";
        }
        return "Neither";
    }
    bool ipv4(string IP) {
        int start = 0, end = -1;
        for (int i = 0; i < 4; i++)
        {
            start = end + 1;
            end = IP.find('.', start);
            string substring = "";
            if (end != string::npos)
                substring = IP.substr(start, end-start);
            else
                substring = IP.substr(start);
            if (substring.empty() || substring[0] == '0' && substring.size() > 1 || substring.size() > 3)
                return false;
            int num = 0;
            for (int j = 0; j < substring.size(); j++)
            {
                if (substring[j] < '0' || substring[j] > '9')
                    return false;
                num = 10*num + (substring[j] - '0');
            }
            if (num > 255)
                return false;
        }
        return end == string::npos ? true : false;
    }
    bool ipv6(string IP) {
        int start = 0, end = -1;
        for (int i = 0; i < 8; i++)
        {
            start = end + 1;
            end = IP.find(':', start);
            string substring = "";
            if (end != string::npos)
                substring = IP.substr(start, end-start);
            else
                substring = IP.substr(start);
            if (substring.size() > 4 || substring.empty())
                return false;
            for (int j = 0; j < substring.size(); j++)
            {
                if (substring[j] >= '0' && substring[j] <= '9')
                    continue;
                if (tolower(substring[j]) > 'f' || tolower(substring[j]) < 'a')
                    return false;
            }
        }
        return end == string::npos ? true : false;
    }
};
