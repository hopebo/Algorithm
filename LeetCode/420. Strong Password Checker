class Solution {
public:
    int strongPasswordChecker(string s) {
        int len = s.size(), toAdd = max(0, 6 - len), toDel = max(0, len - 20);
        int add = 0, rep = 0, del = 0, upper = 1, lower = 1, digit = 1;
        vector<vector<int>> repeat(3, vector<int>());
        for (int l = 0, r = 0; r < len; r++)
        {
            if (upper && isupper(s[r])) upper--;
            if (lower && islower(s[r])) lower--;
            if (digit && isdigit(s[r])) digit--;
            if (r == len - 1 || s[r] != s[l])
            {
                int n = s[r] == s[l] ? r - l + 1 : r - l;
                if (n >= 3)
                    repeat[n % 3].push_back(n);
                l = r;
            }
        }
        for (int k = 0; k < 3; k++)
        {
            for (int i = 0; i < repeat[k].size(); i++)
            {
                if (k < 2)
                {
                    if (add < toAdd)
                    {
                        add++;
                        repeat[k][i] -= k+1;
                    }
                    if (del < toDel)
                    {
                        del += k+1;
                        repeat[k][i] -= k+1;
                    }
                }
                rep += repeat[k][i] / 3;
            }
        }
        if (toDel > del)
            rep = max(0, rep - (toDel - del) / 3);
        else
            rep += del - toDel;
        return toDel + max(toAdd + rep, lower + upper + digit);
    }
};
